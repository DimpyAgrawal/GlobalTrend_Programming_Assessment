import java.util.*;
public class Main {
    static class Interval {
        int low, high;

        public Interval(int low, int high) {
            this.low = low;
            this.high = high;
        }

        public String toString() {
            return "[" + this.low + "," + this.high + "]";
        }
    }

    static class Node {
        Interval range;
        Node left, right;

        public Node(Interval range) {
            this.range = range;
        }

        public String toString() {
            return "[" + this.range.low + ", "
                + this.range.high + "]\n";
        }
    }

    public static Node insert(Node root, Interval x) {
        if (root == null) {
            return new Node(x);
        }
        if (x.low < root.range.low) {
            root.left = insert(root.left, x);
        } else {
            root.right = insert(root.right, x);
        }
        return root;
    }

    public static Node deleteInterval(Node root, Interval x) {
        if (root == null) {
            return null;
        }

        if (x.low < root.range.low) {
            root.left = deleteInterval(root.left, x);
        } else if (x.low > root.range.low) {
            root.right = deleteInterval(root.right, x);
        } else {
            if (root.left == null) {
                return root.right;
            } else if (root.right == null) {
                return root.left;
            }

            Node minNode = findMin(root.right);
            root.range = minNode.range;
            root.right = deleteInterval(root.right, minNode.range);
        }
        return root;
    }

    public static Node findMin(Node root) {
        while (root.left != null) {
            root = root.left;
        }
        return root;
    }

    public static void inOrder(Node root) {
        if (root == null) {
            return;
        }
        inOrder(root.left);
        System.out.print(root);
        inOrder(root.right);
    }

    public static Interval isOverlapping(Node root, Interval x) {
        if (root == null) {
            return new Interval(-1, -1);
        }
        if ((x.low >= root.range.low && x.low <= root.range.high)
            || (x.high >= root.range.low && x.high <= root.range.high)) {
            return root.range;
        } else if (root.left != null) {
            return isOverlapping(root.left, x);
        } else {
            return isOverlapping(root.right, x);
        }
    }

    public static void main(String[] args) {
        Node root = insert(null, new Interval(15, 20));
        root = insert(root, new Interval(10, 30));
        root = insert(root, new Interval(17, 19));
        root = insert(root, new Interval(5, 20));
        root = insert(root, new Interval(12, 15));
        root = insert(root, new Interval(30, 40));

        System.out.println("Inorder traversal of constructed Interval Tree is");
        inOrder(root);
        System.out.println();

        Interval i = new Interval(6, 7);
        System.out.println("Searching for interval " + i);
        System.out.println("Overlaps with " + isOverlapping(root, i));
        System.out.println();

        System.out.println("Deleting interval [10, 30]");
        root = deleteInterval(root, new Interval(10, 30));
        System.out.println("Inorder traversal after deletion:");
        inOrder(root);
        System.out.println();
    }
}
